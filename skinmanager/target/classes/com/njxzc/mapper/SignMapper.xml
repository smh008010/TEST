<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.njxzc.dao.SignMapper">
  <resultMap id="BaseResultMap" type="com.njxzc.model.Sign">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="userid" jdbcType="INTEGER" property="userid" />
    <result column="date" jdbcType="TIMESTAMP" property="date" />
    <result column="state" jdbcType="INTEGER" property="state" />
    <result column="number" jdbcType="INTEGER" property="number" />
    <result column="signmonth" jdbcType="VARCHAR" property="signmonth" />
    <result column="signyear" jdbcType="VARCHAR" property="signyear" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, userid, date, state, number, signmonth, signyear
  </sql>
  <select id="selectByExample" parameterType="com.njxzc.model.SignExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from sign
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    <if test="limit != null">
      <if test="offset != null">
        limit ${offset}, ${limit}
      </if>
      <if test="offset == null">
        limit ${limit}
      </if>
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from sign
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from sign
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.njxzc.model.SignExample">
    delete from sign
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.njxzc.model.Sign">
    insert into sign (id, userid, date, 
      state, number, signmonth, 
      signyear)
    values (#{id,jdbcType=INTEGER}, #{userid,jdbcType=INTEGER}, #{date,jdbcType=TIMESTAMP}, 
      #{state,jdbcType=INTEGER}, #{number,jdbcType=INTEGER}, #{signmonth,jdbcType=VARCHAR}, 
      #{signyear,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.njxzc.model.Sign">
    insert into sign
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="userid != null">
        userid,
      </if>
      <if test="date != null">
        date,
      </if>
      <if test="state != null">
        state,
      </if>
      <if test="number != null">
        number,
      </if>
      <if test="signmonth != null">
        signmonth,
      </if>
      <if test="signyear != null">
        signyear,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="userid != null">
        #{userid,jdbcType=INTEGER},
      </if>
      <if test="date != null">
        #{date,jdbcType=TIMESTAMP},
      </if>
      <if test="state != null">
        #{state,jdbcType=INTEGER},
      </if>
      <if test="number != null">
        #{number,jdbcType=INTEGER},
      </if>
      <if test="signmonth != null">
        #{signmonth,jdbcType=VARCHAR},
      </if>
      <if test="signyear != null">
        #{signyear,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.njxzc.model.SignExample" resultType="java.lang.Long">
    select count(*) from sign
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update sign
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.userid != null">
        userid = #{record.userid,jdbcType=INTEGER},
      </if>
      <if test="record.date != null">
        date = #{record.date,jdbcType=TIMESTAMP},
      </if>
      <if test="record.state != null">
        state = #{record.state,jdbcType=INTEGER},
      </if>
      <if test="record.number != null">
        number = #{record.number,jdbcType=INTEGER},
      </if>
      <if test="record.signmonth != null">
        signmonth = #{record.signmonth,jdbcType=VARCHAR},
      </if>
      <if test="record.signyear != null">
        signyear = #{record.signyear,jdbcType=VARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update sign
    set id = #{record.id,jdbcType=INTEGER},
      userid = #{record.userid,jdbcType=INTEGER},
      date = #{record.date,jdbcType=TIMESTAMP},
      state = #{record.state,jdbcType=INTEGER},
      number = #{record.number,jdbcType=INTEGER},
      signmonth = #{record.signmonth,jdbcType=VARCHAR},
      signyear = #{record.signyear,jdbcType=VARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.njxzc.model.Sign">
    update sign
    <set>
      <if test="userid != null">
        userid = #{userid,jdbcType=INTEGER},
      </if>
      <if test="date != null">
        date = #{date,jdbcType=TIMESTAMP},
      </if>
      <if test="state != null">
        state = #{state,jdbcType=INTEGER},
      </if>
      <if test="number != null">
        number = #{number,jdbcType=INTEGER},
      </if>
      <if test="signmonth != null">
        signmonth = #{signmonth,jdbcType=VARCHAR},
      </if>
      <if test="signyear != null">
        signyear = #{signyear,jdbcType=VARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.njxzc.model.Sign">
    update sign
    set userid = #{userid,jdbcType=INTEGER},
      date = #{date,jdbcType=TIMESTAMP},
      state = #{state,jdbcType=INTEGER},
      number = #{number,jdbcType=INTEGER},
      signmonth = #{signmonth,jdbcType=VARCHAR},
      signyear = #{signyear,jdbcType=VARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
  
  <resultMap type="com.njxzc.model.Sign" id="signmap">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="userid" jdbcType="INTEGER" property="userid" />
    <result column="date" jdbcType="TIMESTAMP" property="date" />
    <result column="state" jdbcType="INTEGER" property="state" />
    <result column="number" jdbcType="INTEGER" property="number" />
    <result column="signmonth" jdbcType="VARCHAR" property="signmonth" />
    <result column="signyear" jdbcType="VARCHAR" property="signyear" />
    <association property="user" javaType="com.njxzc.model.User">
      <id column="userid1" jdbcType="INTEGER" property="userid" />
      <result column="username" jdbcType="VARCHAR" property="username" />
    </association>
  </resultMap>
  <select id="queryall" resultMap="signmap">
  SELECT * FROM sign,user WHERE sign.userid=user.userid
  </select>
  <select id="queryone" resultMap="signmap" parameterType="Integer">
  SELECT * FROM sign,user WHERE sign.userid=user.userid AND id=#{id}
  </select>
  
  <select id="querysign" resultMap="signmap">
  SELECT COUNT(*)as number,YEAR(date) as signyear,MONTH(date)as signmonth,user.username from sign,user WHERE sign.userid=`user`.userid AND state=1 GROUP BY MONTH(date),sign.userid,YEAR(date)
  </select>
  
  <select id="querystate"  resultMap="signmap">
  SELECT * from sign WHERE userid=#{userid} AND date=#{date}  AND  state=1
  </select>
  
  <insert id="inSignIn">
  INSERT into sign(userid,date,state) VALUES(#{userid,jdbcType=INTEGER}, #{date},1)
  </insert>
</mapper>